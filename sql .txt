-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2021-07-02 21:49:04 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE car (
    car_id                INTEGER NOT NULL,
    manufacturer          VARCHAR2(50 CHAR) NOT NULL,
    status                SMALLINT NOT NULL,
    name                  VARCHAR2(50 CHAR) NOT NULL,
    color                 VARCHAR2(20) NOT NULL,
    price                 INTEGER NOT NULL,
    ready                 CHAR(1) NOT NULL,
    engine                VARCHAR2(20) NOT NULL,
    tank_size             INTEGER NOT NULL,
    date_of_manufacture   DATE NOT NULL,
    registration_date     DATE NOT NULL
);

ALTER TABLE car ADD CONSTRAINT car_pk PRIMARY KEY ( car_id );

CREATE TABLE client (
    client_id         VARCHAR2(50) NOT NULL,
    name              VARCHAR2(20 BYTE) NOT NULL,
    address           VARCHAR2(100 BYTE) NOT NULL,
    phone_number      VARCHAR2(50 CHAR),
    job               VARCHAR2(50 CHAR),
    national_number   VARCHAR2(50) NOT NULL
);

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( client_id );

CREATE TABLE constants (
    number_of_sales            INTEGER NOT NULL,
    discount                   NUMBER NOT NULL,
    max_installment_period     INTEGER NOT NULL,
    min_first_payment          NUMBER NOT NULL,
    benifit                    NUMBER NOT NULL,
    available_payment_period   INTEGER NOT NULL,
    fine                       INTEGER NOT NULL,
    acceptable_late_period     INTEGER NOT NULL,
    constant_id                INTEGER NOT NULL,
    active                     CHAR(1) NOT NULL,
    min_price                  INTEGER NOT NULL,
    comession_one              NUMBER NOT NULL,
    max_price                  INTEGER NOT NULL,
    comesion_two               NUMBER NOT NULL,
    comession_three            NUMBER,
    "date"                     DATE NOT NULL
);

ALTER TABLE constants ADD CONSTRAINT constants_pk PRIMARY KEY ( constant_id );

CREATE TABLE contract (
    contract_id      INTEGER NOT NULL,
    payment_method   VARCHAR2(20 CHAR) NOT NULL,
    employee_id      INTEGER NOT NULL,
    client_id        VARCHAR2(50) NOT NULL,
    car_car_id       INTEGER NOT NULL,
    "date"           DATE NOT NULL
);

ALTER TABLE contract ADD CONSTRAINT contract_pk PRIMARY KEY ( contract_id );

CREATE TABLE employee (
    id              INTEGER NOT NULL,
    email           VARCHAR2(50 CHAR) NOT NULL,
    password        VARCHAR2(20 CHAR) NOT NULL,
    salary          INTEGER NOT NULL,
    role            VARCHAR2(50 CHAR) NOT NULL,
    bonus           INTEGER,
    hire_date       DATE NOT NULL,
    leave_date      DATE,
    name            VARCHAR2(20) NOT NULL,
    permission_id   INTEGER NOT NULL
);

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( id );

CREATE TABLE installement_payment (
    first_payment          INTEGER NOT NULL,
    period_of_payment      INTEGER NOT NULL,
    suspended              VARCHAR2(50 CHAR) NOT NULL,
    paid_months            INTEGER NOT NULL,
    contract_contract_id   INTEGER NOT NULL
);

ALTER TABLE installement_payment ADD CONSTRAINT installement_payment_pk PRIMARY KEY ( contract_contract_id );

CREATE TABLE permissions (
    change_commission             CHAR(1) NOT NULL,
    permission_id                 INTEGER NOT NULL,
    ch_number_of_sales            CHAR(1) NOT NULL,
    ch_max_installment_period     CHAR(1) NOT NULL,
    ch_min_first_payment          CHAR(1) NOT NULL,
    ch_benifit                    CHAR(1) NOT NULL,
    ch_fine                       CHAR(1) NOT NULL,
    ch_available_payment_period   CHAR(1) NOT NULL,
    ch_acceptable_late_period     CHAR(1) NOT NULL,
    ch_active                     CHAR(1) NOT NULL,
    open_account                  CHAR(1) NOT NULL,
    ch_password                   CHAR(1) NOT NULL,
    close_account                 CHAR(1) NOT NULL,
    active                        VARCHAR2(30) NOT NULL,
    "date"                        DATE NOT NULL,
    role                          VARCHAR2(20)
);

ALTER TABLE permissions ADD CONSTRAINT permissions_pk PRIMARY KEY ( permission_id );

CREATE TABLE pyment (
    amount                     INTEGER NOT NULL,
    installement_contract_id   INTEGER NOT NULL,
    date_date                  DATE NOT NULL,
    payment_id                 INTEGER NOT NULL
);

ALTER TABLE pyment ADD CONSTRAINT pyment_pk PRIMARY KEY ( payment_id );

ALTER TABLE contract
    ADD CONSTRAINT contract_car_fk FOREIGN KEY ( car_car_id )
        REFERENCES car ( car_id );

ALTER TABLE contract
    ADD CONSTRAINT contract_client_fk FOREIGN KEY ( client_id )
        REFERENCES client ( client_id );

ALTER TABLE contract
    ADD CONSTRAINT contract_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE employee
    ADD CONSTRAINT emp_perm_fk FOREIGN KEY ( permission_id )
        REFERENCES permissions ( permission_id );

ALTER TABLE installement_payment
    ADD CONSTRAINT installement_contract_fk FOREIGN KEY ( contract_contract_id )
        REFERENCES contract ( contract_id );

ALTER TABLE pyment
    ADD CONSTRAINT installement_pay_fk FOREIGN KEY ( installement_contract_id )
        REFERENCES installement_payment ( contract_contract_id );

-------

alter table employee
add active char(1 byte); 

alter table contract
add closed char(1 byte); 

alter table installement_payment
add amount_left number;

alter table client
add times number;


create SEQUENCE car_seq START WITH 1;

create or replace trigger car_id_inc before insert on car
for each row 
begin
if :NEW.car_id is null 
then select car_seq.nextval into :NEW.car_id from dual ;
end if;
end;

create SEQUENCE contract_seq START WITH 1;

create or replace trigger contract_id_inc before insert on contract
for each row 
begin
if :NEW.contract_id is null 
then select contract_seq.nextval into :NEW.contract_id from dual ;
end if;
end;


create SEQUENCE employee_seq START WITH 1;

create or replace trigger employee_id_inc before insert on employee
for each row 
begin
if :NEW.id is null 
then select employee_seq.nextval into :NEW.id from dual ;
end if;
end;


create SEQUENCE client_seq START WITH 1;

create or replace trigger client_id_inc before insert on client
for each row 
begin
if :NEW.client_id is null 
then select client_seq.nextval into :NEW.client_id from dual ;
end if;
end;

create SEQUENCE permissions_seq START WITH 1;

create or replace trigger permissions_id_inc before insert on permissions
for each row 
begin
if :NEW.permission_id is null 
then select permissions_seq.nextval into :NEW.permission_id from dual ;
end if;
end;


create SEQUENCE constants_seq START WITH 1;

create or replace trigger constants_id_inc before insert on constants
for each row 
begin
if :NEW.constant_id is null 
then select constants_seq.nextval into :NEW.constant_id from dual ;
end if;
end;

